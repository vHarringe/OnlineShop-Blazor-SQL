@page "/"
@using System.Security.Claims
@using DTOs

@inject ICarService cs
@inject ICartService cartService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IOrderService os

@rendermode InteractiveServer

@if (alert)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        Du måste vara inloggad för att handla! <a href="/Account/Login">Logga in</a> eller <a href="/Account/Register">Registrera</a>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="DismissAlert"></button>
    </div>
    
}
@if (alertCart && carCart != null)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        Den valda artikeln har inte lagts till i varukorgen, då du valt fler än som finns tillgängliga i lager 
        (just nu finns @carCart.Qty artiklar i lager).
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="DismissAlert"></button>
    </div>
    
}

<h1 class="text-center bilrubrik">Turboexpressen</h1>


<div class="row mt-5 text-center" >
    @foreach(var car in cars)
    {
        <CarComponent car="car"
                      ProductPage ="() => NavigateToProduct(car.Id)"
                      AddToCart ="() => AddToCart(car)"/>
    }

</div>

@code {

    List<Car> cars = new();
    List<int> sounds = new List<int> { 1, 2, 3, 4, 5 };
    int i = 0;
    string? userId;

    OrderDto? order;

    public bool alert = false;
    public bool alertCart = false;

    public int itemsInCart;
    public int lagerSaldo;
    public Car? carCart;


    protected override async Task OnInitializedAsync()
    {
        cars = (await cs.GetAllCarsAsync()).ToList();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user != null && user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }

        order = await os.GetOrder(1);
    }
    void NavigateToProduct(int productId)
    {
        NavigationManager.NavigateTo($"/Product/{productId}");
    }

    public async Task AddToCart(Car car)
    {
        if(userId != null)
        {
            itemsInCart = await cartService.GetItemCount(userId, car.Id);
            if (itemsInCart >= car.Qty)
            {
                carCart = car;
                alertCart = true;
            }
            else
            {
                await cartService.AddCartItem(car, userId, 1);
            }
        }
        else
        {
            alert = true;
        }

    }
    private void DismissAlert()
    {
        alert = false;
        alertCart = false;
    }
    

}